dhjz/dhjz.github.io/contents/dtab.json  dhjz@konosuba52.onmicrosoft.com
电脑评测:  https://www.ilanzou.com/s/aHPyZKA6   https://wwoy.lanzouj.com/b0065b0ekd  1111   https://www.123pan.com/s/smkDVv-WR05v?提取码:1111  https://caiyun.139.com/m/i?105CqgQdU8U6X  6ViE  https://cloud.189.cn/web/share?code=zMrEBbUfIvmm（访问码：dvz1）
软件: https://www.ghxi.com/   https://www.fy6b.com/   https://www.sixyin.com/  https://www.uy5.net/
电视: https://imyshare.com/ https://dsxys.pro/  https://www.dmxq.net/  https://tv.pilipili6.top/  https://gaze.run/  https://zhuiyingmao.vip/  https://lkvod.me/
GPT: https://chat18.aichatos.xyz/ https://kimi.moonshot.cn/   https://metaso.cn/
皮肤12: <layout_s width="130" height="22"><cpu x="14" y="2" width="106" align="0" show="1"/><memory x="68" y="2" width="106" align="0" show="1"/>
https://www.123pan.cn/s/HQeA-4CpSh.html

package main

import (
    "fmt"
    "log"
    "syscall"
    "unsafe"
)

var (
    user32                   = syscall.NewLazyDLL("user32.dll")
    setWindowsHookEx         = user32.NewProc("SetWindowsHookExW")
    callNextHookEx           = user32.NewProc("CallNextHookEx")
    unhookWindowsHookEx      = user32.NewProc("UnhookWindowsHookEx")
    getMessage               = user32.NewProc("GetMessageW")
    translateMessage         = user32.NewProc("TranslateMessage")
    dispatchMessage          = user32.NewProc("DispatchMessageW")
)

const (
    WH_MOUSE_LL = 14
    WM_MOUSEWHEEL = 0x020A
)

type MSLLHOOKSTRUCT struct {
    Pnt  POINT
    MouseData uint32
    Flags     uint32
    Time      uint32
    DwExtra   uintptr
}

type POINT struct {
    X, Y int32
}

var (
    hHook syscall.Handle
)

func hookProc(nCode int, wParam uintptr, lParam uintptr) uintptr {
    if nCode >= 0 && wParam == WM_MOUSEWHEEL {
        hookStruct := (*MSLLHOOKSTRUCT)(unsafe.Pointer(lParam))
        delta := int32(hookStruct.MouseData >> 16)
        if delta > 0 {
            fmt.Println("Scrolled Up")
        } else {
            fmt.Println("Scrolled Down")
        }
    }
    ret, _, _ := callNextHookEx.Call(uintptr(hHook), uintptr(nCode), wParam, lParam)
    return ret
}

func main() {
    hInstance := syscall.GetModuleHandle(nil)
    hHook, _, _ = setWindowsHookEx.Call(WH_MOUSE_LL, syscall.NewCallback(hookProc), hInstance, 0)
    if hHook == 0 {
        log.Fatal("Failed to set hook")
    }

    msg := new(syscall.MSG)
    for {
        _, _, _ = getMessage.Call(uintptr(unsafe.Pointer(msg)), 0, 0, 0)
        translateMessage.Call(uintptr(unsafe.Pointer(msg)))
        dispatchMessage.Call(uintptr(unsafe.Pointer(msg)))
    }
}